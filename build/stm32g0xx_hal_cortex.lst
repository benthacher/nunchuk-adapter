ARM GAS  /tmp/cc9pIOhy.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32g0xx_hal_cortex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c"
  18              		.section	.text.__NVIC_SetPriority,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	__NVIC_SetPriority:
  25              	.LVL0:
  26              	.LFB33:
  27              		.file 2 "Drivers/CMSIS/Include/core_cm0plus.h"
   1:Drivers/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:Drivers/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.7
   5:Drivers/CMSIS/Include/core_cm0plus.h ****  * @date     13. March 2019
   6:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0plus.h **** /*
   8:Drivers/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  10:Drivers/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  12:Drivers/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  16:Drivers/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  18:Drivers/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  24:Drivers/CMSIS/Include/core_cm0plus.h **** 
  25:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0plus.h **** 
  31:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
ARM GAS  /tmp/cc9pIOhy.s 			page 2


  32:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0plus.h **** 
  34:Drivers/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0plus.h **** 
  36:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0plus.h **** 
  40:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  41:Drivers/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0plus.h **** 
  44:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0plus.h **** 
  47:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0plus.h **** 
  50:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  53:Drivers/CMSIS/Include/core_cm0plus.h **** 
  54:Drivers/CMSIS/Include/core_cm0plus.h **** 
  55:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  59:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  62:Drivers/CMSIS/Include/core_cm0plus.h **** 
  63:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0plus.h ****  
  65:Drivers/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:Drivers/CMSIS/Include/core_cm0plus.h **** 
  71:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:Drivers/CMSIS/Include/core_cm0plus.h **** 
  73:Drivers/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0plus.h **** */
  76:Drivers/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0plus.h **** 
  78:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0plus.h **** 
  83:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_FP
  85:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0plus.h **** 
  88:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
ARM GAS  /tmp/cc9pIOhy.s 			page 3


  89:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0plus.h **** 
  93:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0plus.h **** 
  98:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0plus.h **** 
 103:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0plus.h **** 
 108:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0plus.h **** 
 113:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0plus.h **** 
 115:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0plus.h **** 
 117:Drivers/CMSIS/Include/core_cm0plus.h **** 
 118:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0plus.h **** }
 120:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0plus.h **** 
 122:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0plus.h **** 
 124:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0plus.h **** 
 126:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0plus.h **** 
 129:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0plus.h **** 
 133:Drivers/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0plus.h **** 
 140:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0plus.h **** 
 145:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
ARM GAS  /tmp/cc9pIOhy.s 			page 4


 146:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0plus.h **** 
 150:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm0plus.h **** 
 155:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 160:Drivers/CMSIS/Include/core_cm0plus.h **** 
 161:Drivers/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 163:Drivers/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:Drivers/CMSIS/Include/core_cm0plus.h **** 
 165:Drivers/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:Drivers/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:Drivers/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:Drivers/CMSIS/Include/core_cm0plus.h **** */
 169:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 172:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 174:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:Drivers/CMSIS/Include/core_cm0plus.h **** 
 177:Drivers/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:Drivers/CMSIS/Include/core_cm0plus.h **** 
 182:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:Drivers/CMSIS/Include/core_cm0plus.h **** 
 184:Drivers/CMSIS/Include/core_cm0plus.h **** 
 185:Drivers/CMSIS/Include/core_cm0plus.h **** 
 186:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 196:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:Drivers/CMSIS/Include/core_cm0plus.h **** */
 199:Drivers/CMSIS/Include/core_cm0plus.h **** 
 200:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 201:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
ARM GAS  /tmp/cc9pIOhy.s 			page 5


 203:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 205:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 206:Drivers/CMSIS/Include/core_cm0plus.h **** 
 207:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 208:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 210:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 211:Drivers/CMSIS/Include/core_cm0plus.h **** {
 212:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 213:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 214:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:Drivers/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:Drivers/CMSIS/Include/core_cm0plus.h **** 
 223:Drivers/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm0plus.h **** 
 227:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm0plus.h **** 
 230:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm0plus.h **** 
 233:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm0plus.h **** 
 236:Drivers/CMSIS/Include/core_cm0plus.h **** 
 237:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 238:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 240:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm0plus.h **** {
 242:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 243:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 244:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Drivers/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm0plus.h **** 
 250:Drivers/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm0plus.h **** 
 254:Drivers/CMSIS/Include/core_cm0plus.h **** 
 255:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 256:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 258:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm0plus.h **** {
ARM GAS  /tmp/cc9pIOhy.s 			page 6


 260:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 261:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 262:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:Drivers/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:Drivers/CMSIS/Include/core_cm0plus.h **** 
 274:Drivers/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0plus.h **** 
 278:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0plus.h **** 
 281:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm0plus.h **** 
 284:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm0plus.h **** 
 287:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm0plus.h **** 
 290:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm0plus.h **** 
 293:Drivers/CMSIS/Include/core_cm0plus.h **** 
 294:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 295:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 297:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 298:Drivers/CMSIS/Include/core_cm0plus.h **** {
 299:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 300:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 301:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:Drivers/CMSIS/Include/core_cm0plus.h **** 
 308:Drivers/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:Drivers/CMSIS/Include/core_cm0plus.h **** 
 312:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:Drivers/CMSIS/Include/core_cm0plus.h **** 
 315:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cc9pIOhy.s 			page 7


 317:Drivers/CMSIS/Include/core_cm0plus.h **** 
 318:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 319:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 323:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 324:Drivers/CMSIS/Include/core_cm0plus.h **** 
 325:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 326:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 328:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 329:Drivers/CMSIS/Include/core_cm0plus.h **** {
 330:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1[31U];
 334:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:Drivers/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:Drivers/CMSIS/Include/core_cm0plus.h **** 
 342:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:Drivers/CMSIS/Include/core_cm0plus.h **** 
 344:Drivers/CMSIS/Include/core_cm0plus.h **** 
 345:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 346:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 350:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 351:Drivers/CMSIS/Include/core_cm0plus.h **** 
 352:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 353:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 355:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:Drivers/CMSIS/Include/core_cm0plus.h **** {
 357:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 362:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 364:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:Drivers/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:Drivers/CMSIS/Include/core_cm0plus.h **** 
 372:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
ARM GAS  /tmp/cc9pIOhy.s 			page 8


 374:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0plus.h **** 
 376:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0plus.h **** 
 379:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0plus.h **** 
 382:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0plus.h **** 
 385:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0plus.h **** 
 388:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0plus.h **** 
 392:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0plus.h **** 
 395:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0plus.h **** 
 398:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0plus.h **** 
 401:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0plus.h **** 
 404:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0plus.h **** 
 407:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0plus.h **** 
 410:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0plus.h **** 
 413:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:Drivers/CMSIS/Include/core_cm0plus.h **** 
 416:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 421:Drivers/CMSIS/Include/core_cm0plus.h **** 
 422:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:Drivers/CMSIS/Include/core_cm0plus.h **** 
 426:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:Drivers/CMSIS/Include/core_cm0plus.h **** 
 429:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
ARM GAS  /tmp/cc9pIOhy.s 			page 9


 431:Drivers/CMSIS/Include/core_cm0plus.h **** 
 432:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0plus.h **** 
 435:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:Drivers/CMSIS/Include/core_cm0plus.h **** 
 438:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0plus.h **** 
 442:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0plus.h **** 
 445:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm0plus.h **** 
 448:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0plus.h **** 
 452:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0plus.h **** 
 455:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0plus.h **** 
 459:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:Drivers/CMSIS/Include/core_cm0plus.h **** 
 461:Drivers/CMSIS/Include/core_cm0plus.h **** 
 462:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 463:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 467:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 468:Drivers/CMSIS/Include/core_cm0plus.h **** 
 469:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 470:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 472:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:Drivers/CMSIS/Include/core_cm0plus.h **** {
 474:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:Drivers/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:Drivers/CMSIS/Include/core_cm0plus.h **** 
 480:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0plus.h **** 
 484:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0plus.h **** 
 487:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
ARM GAS  /tmp/cc9pIOhy.s 			page 10


 488:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:Drivers/CMSIS/Include/core_cm0plus.h **** 
 490:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:Drivers/CMSIS/Include/core_cm0plus.h **** 
 493:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:Drivers/CMSIS/Include/core_cm0plus.h **** 
 497:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:Drivers/CMSIS/Include/core_cm0plus.h **** 
 501:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:Drivers/CMSIS/Include/core_cm0plus.h **** 
 505:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0plus.h **** 
 508:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0plus.h **** 
 511:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:Drivers/CMSIS/Include/core_cm0plus.h **** 
 513:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 515:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 519:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 520:Drivers/CMSIS/Include/core_cm0plus.h **** 
 521:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 522:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 524:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:Drivers/CMSIS/Include/core_cm0plus.h **** {
 526:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:Drivers/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:Drivers/CMSIS/Include/core_cm0plus.h **** 
 533:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:Drivers/CMSIS/Include/core_cm0plus.h **** 
 535:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:Drivers/CMSIS/Include/core_cm0plus.h **** 
 539:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:Drivers/CMSIS/Include/core_cm0plus.h **** 
 542:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cc9pIOhy.s 			page 11


 545:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
 546:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:Drivers/CMSIS/Include/core_cm0plus.h **** 
 549:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:Drivers/CMSIS/Include/core_cm0plus.h **** 
 552:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:Drivers/CMSIS/Include/core_cm0plus.h **** 
 555:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:Drivers/CMSIS/Include/core_cm0plus.h **** 
 559:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:Drivers/CMSIS/Include/core_cm0plus.h **** 
 563:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:Drivers/CMSIS/Include/core_cm0plus.h **** 
 566:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:Drivers/CMSIS/Include/core_cm0plus.h **** 
 569:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:Drivers/CMSIS/Include/core_cm0plus.h **** 
 573:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:Drivers/CMSIS/Include/core_cm0plus.h **** 
 576:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:Drivers/CMSIS/Include/core_cm0plus.h **** 
 579:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:Drivers/CMSIS/Include/core_cm0plus.h **** 
 582:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:Drivers/CMSIS/Include/core_cm0plus.h **** 
 585:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:Drivers/CMSIS/Include/core_cm0plus.h **** 
 588:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:Drivers/CMSIS/Include/core_cm0plus.h **** 
 591:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:Drivers/CMSIS/Include/core_cm0plus.h **** 
 594:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:Drivers/CMSIS/Include/core_cm0plus.h **** 
 597:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:Drivers/CMSIS/Include/core_cm0plus.h **** 
 600:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
ARM GAS  /tmp/cc9pIOhy.s 			page 12


 602:Drivers/CMSIS/Include/core_cm0plus.h **** 
 603:Drivers/CMSIS/Include/core_cm0plus.h **** 
 604:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 605:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:Drivers/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 610:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 611:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:Drivers/CMSIS/Include/core_cm0plus.h **** 
 613:Drivers/CMSIS/Include/core_cm0plus.h **** 
 614:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 615:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 619:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 620:Drivers/CMSIS/Include/core_cm0plus.h **** 
 621:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 622:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:Drivers/CMSIS/Include/core_cm0plus.h **** */
 627:Drivers/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:Drivers/CMSIS/Include/core_cm0plus.h **** 
 629:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 630:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:Drivers/CMSIS/Include/core_cm0plus.h **** */
 635:Drivers/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:Drivers/CMSIS/Include/core_cm0plus.h **** 
 637:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:Drivers/CMSIS/Include/core_cm0plus.h **** 
 639:Drivers/CMSIS/Include/core_cm0plus.h **** 
 640:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 641:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 645:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 646:Drivers/CMSIS/Include/core_cm0plus.h **** 
 647:Drivers/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:Drivers/CMSIS/Include/core_cm0plus.h **** 
 653:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:Drivers/CMSIS/Include/core_cm0plus.h **** 
 657:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
ARM GAS  /tmp/cc9pIOhy.s 			page 13


 659:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 660:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 661:Drivers/CMSIS/Include/core_cm0plus.h **** 
 662:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:Drivers/CMSIS/Include/core_cm0plus.h **** 
 664:Drivers/CMSIS/Include/core_cm0plus.h **** 
 665:Drivers/CMSIS/Include/core_cm0plus.h **** 
 666:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:Drivers/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 673:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 674:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:Drivers/CMSIS/Include/core_cm0plus.h **** */
 676:Drivers/CMSIS/Include/core_cm0plus.h **** 
 677:Drivers/CMSIS/Include/core_cm0plus.h **** 
 678:Drivers/CMSIS/Include/core_cm0plus.h **** 
 679:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 681:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 685:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 686:Drivers/CMSIS/Include/core_cm0plus.h **** 
 687:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 691:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 693:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:Drivers/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:Drivers/CMSIS/Include/core_cm0plus.h **** 
 707:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 711:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 713:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:Drivers/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
ARM GAS  /tmp/cc9pIOhy.s 			page 14


 716:Drivers/CMSIS/Include/core_cm0plus.h **** 
 717:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:Drivers/CMSIS/Include/core_cm0plus.h **** 
 719:Drivers/CMSIS/Include/core_cm0plus.h **** 
 720:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:Drivers/CMSIS/Include/core_cm0plus.h **** 
 725:Drivers/CMSIS/Include/core_cm0plus.h **** 
 726:Drivers/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:Drivers/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:Drivers/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:Drivers/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:Drivers/CMSIS/Include/core_cm0plus.h **** 
 732:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:Drivers/CMSIS/Include/core_cm0plus.h **** 
 735:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 736:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 741:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:Drivers/CMSIS/Include/core_cm0plus.h **** {
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 744:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 747:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 748:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 749:Drivers/CMSIS/Include/core_cm0plus.h **** }
 750:Drivers/CMSIS/Include/core_cm0plus.h **** 
 751:Drivers/CMSIS/Include/core_cm0plus.h **** 
 752:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 753:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 754:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 755:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 756:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 757:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 758:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 759:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 760:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 761:Drivers/CMSIS/Include/core_cm0plus.h **** {
 762:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 763:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 764:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 765:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 766:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 767:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 768:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 769:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 770:Drivers/CMSIS/Include/core_cm0plus.h **** }
 771:Drivers/CMSIS/Include/core_cm0plus.h **** 
 772:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cc9pIOhy.s 			page 15


 773:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 774:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 775:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 776:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 777:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 778:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 779:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 780:Drivers/CMSIS/Include/core_cm0plus.h **** {
 781:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 782:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 784:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 785:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 786:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 787:Drivers/CMSIS/Include/core_cm0plus.h **** }
 788:Drivers/CMSIS/Include/core_cm0plus.h **** 
 789:Drivers/CMSIS/Include/core_cm0plus.h **** 
 790:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 791:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 792:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 793:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 794:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 795:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 796:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 797:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 798:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 799:Drivers/CMSIS/Include/core_cm0plus.h **** {
 800:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 801:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 802:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 803:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 804:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 805:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 806:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 807:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 808:Drivers/CMSIS/Include/core_cm0plus.h **** }
 809:Drivers/CMSIS/Include/core_cm0plus.h **** 
 810:Drivers/CMSIS/Include/core_cm0plus.h **** 
 811:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 812:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 813:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 814:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 815:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 816:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 817:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 818:Drivers/CMSIS/Include/core_cm0plus.h **** {
 819:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 820:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 821:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 822:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 823:Drivers/CMSIS/Include/core_cm0plus.h **** }
 824:Drivers/CMSIS/Include/core_cm0plus.h **** 
 825:Drivers/CMSIS/Include/core_cm0plus.h **** 
 826:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 827:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 828:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 829:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
ARM GAS  /tmp/cc9pIOhy.s 			page 16


 830:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 831:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 832:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 833:Drivers/CMSIS/Include/core_cm0plus.h **** {
 834:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 835:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 836:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 837:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 838:Drivers/CMSIS/Include/core_cm0plus.h **** }
 839:Drivers/CMSIS/Include/core_cm0plus.h **** 
 840:Drivers/CMSIS/Include/core_cm0plus.h **** 
 841:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 842:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 843:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 844:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 845:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 846:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 847:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 848:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 849:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 850:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 851:Drivers/CMSIS/Include/core_cm0plus.h **** {
  28              		.loc 2 851 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 2 851 1 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
 852:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
  40              		.loc 2 852 3 is_stmt 1 view .LVU2
  41              		.loc 2 852 6 is_stmt 0 view .LVU3
  42 0002 0028     		cmp	r0, #0
  43 0004 11DB     		blt	.L2
 853:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 854:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
  44              		.loc 2 854 5 is_stmt 1 view .LVU4
  45              		.loc 2 854 53 is_stmt 0 view .LVU5
  46 0006 8308     		lsrs	r3, r0, #2
  47              		.loc 2 854 52 view .LVU6
  48 0008 134D     		ldr	r5, .L4
  49 000a C033     		adds	r3, r3, #192
  50 000c 9B00     		lsls	r3, r3, #2
  51 000e 5C59     		ldr	r4, [r3, r5]
  52              		.loc 2 854 83 view .LVU7
  53 0010 0322     		movs	r2, #3
  54 0012 1040     		ands	r0, r2
  55              	.LVL1:
  56              		.loc 2 854 83 view .LVU8
  57 0014 C000     		lsls	r0, r0, #3
  58              		.loc 2 854 80 view .LVU9
  59 0016 FC32     		adds	r2, r2, #252
ARM GAS  /tmp/cc9pIOhy.s 			page 17


  60 0018 1600     		movs	r6, r2
  61 001a 8640     		lsls	r6, r6, r0
  62              		.loc 2 854 33 view .LVU10
  63 001c B443     		bics	r4, r6
 855:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  64              		.loc 2 855 20 view .LVU11
  65 001e 8901     		lsls	r1, r1, #6
  66              	.LVL2:
  67              		.loc 2 855 48 view .LVU12
  68 0020 0A40     		ands	r2, r1
  69              		.loc 2 855 68 view .LVU13
  70 0022 8240     		lsls	r2, r2, r0
 854:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  71              		.loc 2 854 102 view .LVU14
  72 0024 2243     		orrs	r2, r4
 854:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  73              		.loc 2 854 30 view .LVU15
  74 0026 5A51     		str	r2, [r3, r5]
  75              	.L1:
 856:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 857:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 858:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 859:Drivers/CMSIS/Include/core_cm0plus.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 860:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 861:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 862:Drivers/CMSIS/Include/core_cm0plus.h **** }
  76              		.loc 2 862 1 view .LVU16
  77              		@ sp needed
  78 0028 70BD     		pop	{r4, r5, r6, pc}
  79              	.LVL3:
  80              	.L2:
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  81              		.loc 2 859 5 is_stmt 1 view .LVU17
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  82              		.loc 2 859 53 is_stmt 0 view .LVU18
  83 002a 0F23     		movs	r3, #15
  84 002c 0340     		ands	r3, r0
  85 002e 083B     		subs	r3, r3, #8
  86 0030 9B08     		lsrs	r3, r3, #2
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  87              		.loc 2 859 52 view .LVU19
  88 0032 0633     		adds	r3, r3, #6
  89 0034 9B00     		lsls	r3, r3, #2
  90 0036 094A     		ldr	r2, .L4+4
  91 0038 9446     		mov	ip, r2
  92 003a 6344     		add	r3, r3, ip
  93 003c 5C68     		ldr	r4, [r3, #4]
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  94              		.loc 2 859 83 view .LVU20
  95 003e 0322     		movs	r2, #3
  96 0040 1040     		ands	r0, r2
  97              	.LVL4:
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  98              		.loc 2 859 83 view .LVU21
  99 0042 C000     		lsls	r0, r0, #3
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 100              		.loc 2 859 80 view .LVU22
ARM GAS  /tmp/cc9pIOhy.s 			page 18


 101 0044 FC32     		adds	r2, r2, #252
 102 0046 1500     		movs	r5, r2
 103 0048 8540     		lsls	r5, r5, r0
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 104              		.loc 2 859 33 view .LVU23
 105 004a AC43     		bics	r4, r5
 860:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 106              		.loc 2 860 20 view .LVU24
 107 004c 8901     		lsls	r1, r1, #6
 108              	.LVL5:
 860:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 109              		.loc 2 860 48 view .LVU25
 110 004e 0A40     		ands	r2, r1
 860:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 111              		.loc 2 860 68 view .LVU26
 112 0050 8240     		lsls	r2, r2, r0
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 113              		.loc 2 859 102 view .LVU27
 114 0052 2243     		orrs	r2, r4
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 115              		.loc 2 859 30 view .LVU28
 116 0054 5A60     		str	r2, [r3, #4]
 117              		.loc 2 862 1 view .LVU29
 118 0056 E7E7     		b	.L1
 119              	.L5:
 120              		.align	2
 121              	.L4:
 122 0058 00E100E0 		.word	-536813312
 123 005c 00ED00E0 		.word	-536810240
 124              		.cfi_endproc
 125              	.LFE33:
 127              		.section	.text.__NVIC_GetPriority,"ax",%progbits
 128              		.align	1
 129              		.syntax unified
 130              		.code	16
 131              		.thumb_func
 133              	__NVIC_GetPriority:
 134              	.LVL6:
 135              	.LFB34:
 863:Drivers/CMSIS/Include/core_cm0plus.h **** 
 864:Drivers/CMSIS/Include/core_cm0plus.h **** 
 865:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 866:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Priority
 867:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 868:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 869:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 870:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn  Interrupt number.
 871:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             Interrupt Priority.
 872:Drivers/CMSIS/Include/core_cm0plus.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 873:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 874:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 875:Drivers/CMSIS/Include/core_cm0plus.h **** {
 136              		.loc 2 875 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
ARM GAS  /tmp/cc9pIOhy.s 			page 19


 876:Drivers/CMSIS/Include/core_cm0plus.h **** 
 877:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 141              		.loc 2 877 3 view .LVU31
 142              		.loc 2 877 6 is_stmt 0 view .LVU32
 143 0000 0028     		cmp	r0, #0
 144 0002 0CDB     		blt	.L7
 878:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 879:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 145              		.loc 2 879 5 is_stmt 1 view .LVU33
 146              		.loc 2 879 35 is_stmt 0 view .LVU34
 147 0004 8308     		lsrs	r3, r0, #2
 148              		.loc 2 879 33 view .LVU35
 149 0006 C033     		adds	r3, r3, #192
 150 0008 9B00     		lsls	r3, r3, #2
 151 000a 0E4A     		ldr	r2, .L9
 152 000c 9B58     		ldr	r3, [r3, r2]
 153              		.loc 2 879 53 view .LVU36
 154 000e 0322     		movs	r2, #3
 155 0010 0240     		ands	r2, r0
 156 0012 D200     		lsls	r2, r2, #3
 157              		.loc 2 879 50 view .LVU37
 158 0014 D340     		lsrs	r3, r3, r2
 159              		.loc 2 879 12 view .LVU38
 160 0016 9B09     		lsrs	r3, r3, #6
 161 0018 0320     		movs	r0, #3
 162              	.LVL7:
 163              		.loc 2 879 12 view .LVU39
 164 001a 1840     		ands	r0, r3
 165              	.L6:
 880:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 881:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 882:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 883:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 884:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 885:Drivers/CMSIS/Include/core_cm0plus.h **** }
 166              		.loc 2 885 1 view .LVU40
 167              		@ sp needed
 168 001c 7047     		bx	lr
 169              	.LVL8:
 170              	.L7:
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 171              		.loc 2 883 5 is_stmt 1 view .LVU41
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 172              		.loc 2 883 34 is_stmt 0 view .LVU42
 173 001e 0F23     		movs	r3, #15
 174 0020 0340     		ands	r3, r0
 175 0022 083B     		subs	r3, r3, #8
 176 0024 9B08     		lsrs	r3, r3, #2
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 177              		.loc 2 883 33 view .LVU43
 178 0026 0633     		adds	r3, r3, #6
 179 0028 9B00     		lsls	r3, r3, #2
 180 002a 074A     		ldr	r2, .L9+4
 181 002c 9446     		mov	ip, r2
 182 002e 6344     		add	r3, r3, ip
 183 0030 5B68     		ldr	r3, [r3, #4]
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
ARM GAS  /tmp/cc9pIOhy.s 			page 20


 184              		.loc 2 883 53 view .LVU44
 185 0032 0322     		movs	r2, #3
 186 0034 0240     		ands	r2, r0
 187 0036 D200     		lsls	r2, r2, #3
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 188              		.loc 2 883 50 view .LVU45
 189 0038 D340     		lsrs	r3, r3, r2
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 190              		.loc 2 883 12 view .LVU46
 191 003a 9B09     		lsrs	r3, r3, #6
 192 003c 0320     		movs	r0, #3
 193              	.LVL9:
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 194              		.loc 2 883 12 view .LVU47
 195 003e 1840     		ands	r0, r3
 196 0040 ECE7     		b	.L6
 197              	.L10:
 198 0042 C046     		.align	2
 199              	.L9:
 200 0044 00E100E0 		.word	-536813312
 201 0048 00ED00E0 		.word	-536810240
 202              		.cfi_endproc
 203              	.LFE34:
 205              		.section	.text.__NVIC_SystemReset,"ax",%progbits
 206              		.align	1
 207              		.syntax unified
 208              		.code	16
 209              		.thumb_func
 211              	__NVIC_SystemReset:
 212              	.LFB39:
 886:Drivers/CMSIS/Include/core_cm0plus.h **** 
 887:Drivers/CMSIS/Include/core_cm0plus.h **** 
 888:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 889:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Encode Priority
 890:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Encodes the priority for an interrupt with the given priority group,
 891:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value, and subpriority value.
 892:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 893:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 894:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 895:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 896:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 897:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 898:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 899:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 900:Drivers/CMSIS/Include/core_cm0plus.h **** {
 901:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 902:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 903:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 904:Drivers/CMSIS/Include/core_cm0plus.h **** 
 905:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 906:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 907:Drivers/CMSIS/Include/core_cm0plus.h **** 
 908:Drivers/CMSIS/Include/core_cm0plus.h ****   return (
 909:Drivers/CMSIS/Include/core_cm0plus.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 910:Drivers/CMSIS/Include/core_cm0plus.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 911:Drivers/CMSIS/Include/core_cm0plus.h ****          );
 912:Drivers/CMSIS/Include/core_cm0plus.h **** }
ARM GAS  /tmp/cc9pIOhy.s 			page 21


 913:Drivers/CMSIS/Include/core_cm0plus.h **** 
 914:Drivers/CMSIS/Include/core_cm0plus.h **** 
 915:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 916:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Decode Priority
 917:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Decodes an interrupt priority value with a given priority group to
 918:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value and subpriority value.
 919:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 920:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 921:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 922:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 923:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 924:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 925:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 926:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 927:Drivers/CMSIS/Include/core_cm0plus.h **** {
 928:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 929:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 930:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 931:Drivers/CMSIS/Include/core_cm0plus.h **** 
 932:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 933:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 934:Drivers/CMSIS/Include/core_cm0plus.h **** 
 935:Drivers/CMSIS/Include/core_cm0plus.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
 936:Drivers/CMSIS/Include/core_cm0plus.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 937:Drivers/CMSIS/Include/core_cm0plus.h **** }
 938:Drivers/CMSIS/Include/core_cm0plus.h **** 
 939:Drivers/CMSIS/Include/core_cm0plus.h **** 
 940:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 941:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Vector
 942:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 943:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 944:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 945:Drivers/CMSIS/Include/core_cm0plus.h ****            VTOR must been relocated to SRAM before.
 946:Drivers/CMSIS/Include/core_cm0plus.h ****            If VTOR is not present address 0 must be mapped to SRAM.
 947:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number
 948:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   vector    Address of interrupt handler function
 949:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 950:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 951:Drivers/CMSIS/Include/core_cm0plus.h **** {
 952:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 953:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = SCB->VTOR;
 954:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 955:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = 0x0U;
 956:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 957:Drivers/CMSIS/Include/core_cm0plus.h ****   (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 958:Drivers/CMSIS/Include/core_cm0plus.h ****   /* ARM Application Note 321 states that the M0+ does not require the architectural barrier */
 959:Drivers/CMSIS/Include/core_cm0plus.h **** }
 960:Drivers/CMSIS/Include/core_cm0plus.h **** 
 961:Drivers/CMSIS/Include/core_cm0plus.h **** 
 962:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 963:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Vector
 964:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads an interrupt vector from interrupt vector table.
 965:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 966:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 967:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number.
 968:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                 Address of interrupt handler function
 969:Drivers/CMSIS/Include/core_cm0plus.h ****  */
ARM GAS  /tmp/cc9pIOhy.s 			page 22


 970:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 971:Drivers/CMSIS/Include/core_cm0plus.h **** {
 972:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 973:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = SCB->VTOR;
 974:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 975:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = 0x0U;
 976:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 977:Drivers/CMSIS/Include/core_cm0plus.h ****   return (uint32_t)(* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4));
 978:Drivers/CMSIS/Include/core_cm0plus.h **** }
 979:Drivers/CMSIS/Include/core_cm0plus.h **** 
 980:Drivers/CMSIS/Include/core_cm0plus.h **** 
 981:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 982:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   System Reset
 983:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Initiates a system reset request to reset the MCU.
 984:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 985:Drivers/CMSIS/Include/core_cm0plus.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
 986:Drivers/CMSIS/Include/core_cm0plus.h **** {
 213              		.loc 2 986 1 is_stmt 1 view -0
 214              		.cfi_startproc
 215              		@ Volatile: function does not return.
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              		@ link register save eliminated.
 987:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure all outstanding memor
 219              		.loc 2 987 3 view .LVU49
 220              	.LBB32:
 221              	.LBI32:
 222              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
ARM GAS  /tmp/cc9pIOhy.s 			page 23


  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
ARM GAS  /tmp/cc9pIOhy.s 			page 24


  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
ARM GAS  /tmp/cc9pIOhy.s 			page 25


 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc9pIOhy.s 			page 26


 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
ARM GAS  /tmp/cc9pIOhy.s 			page 27


 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
ARM GAS  /tmp/cc9pIOhy.s 			page 28


 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc9pIOhy.s 			page 29


 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/cc9pIOhy.s 			page 30


 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/cc9pIOhy.s 			page 31


 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc9pIOhy.s 			page 32


 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/cc9pIOhy.s 			page 33


 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
ARM GAS  /tmp/cc9pIOhy.s 			page 34


 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc9pIOhy.s 			page 35


 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc9pIOhy.s 			page 36


 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc9pIOhy.s 			page 37


 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
ARM GAS  /tmp/cc9pIOhy.s 			page 38


 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
ARM GAS  /tmp/cc9pIOhy.s 			page 39


 942:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 223              		.loc 3 944 27 view .LVU50
 224              	.LBB33:
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 225              		.loc 3 946 3 view .LVU51
 226              		.syntax divided
 227              	@ 946 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 228 0000 BFF34F8F 		dsb 0xF
 229              	@ 0 "" 2
 230              		.thumb
 231              		.syntax unified
 232              	.LBE33:
 233              	.LBE32:
 988:Drivers/CMSIS/Include/core_cm0plus.h ****                                                                        buffered write are completed
 989:Drivers/CMSIS/Include/core_cm0plus.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 234              		.loc 2 989 3 view .LVU52
 235              		.loc 2 989 15 is_stmt 0 view .LVU53
 236 0004 034B     		ldr	r3, .L13
 237 0006 044A     		ldr	r2, .L13+4
 238 0008 DA60     		str	r2, [r3, #12]
 990:Drivers/CMSIS/Include/core_cm0plus.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 991:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure completion of memory 
 239              		.loc 2 991 3 is_stmt 1 view .LVU54
 240              	.LBB34:
 241              	.LBI34:
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 242              		.loc 3 944 27 view .LVU55
 243              	.LBB35:
 244              		.loc 3 946 3 view .LVU56
 245              		.syntax divided
 246              	@ 946 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 247 000a BFF34F8F 		dsb 0xF
 248              	@ 0 "" 2
 249              		.thumb
 250              		.syntax unified
 251              	.L12:
 252              	.LBE35:
 253              	.LBE34:
 992:Drivers/CMSIS/Include/core_cm0plus.h **** 
 993:Drivers/CMSIS/Include/core_cm0plus.h ****   for(;;)                                                           /* wait until reset */
 254              		.loc 2 993 3 discriminator 1 view .LVU57
 994:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 995:Drivers/CMSIS/Include/core_cm0plus.h ****     __NOP();
 255              		.loc 2 995 5 discriminator 1 view .LVU58
 256              		.syntax divided
 257              	@ 995 "Drivers/CMSIS/Include/core_cm0plus.h" 1
 258 000e C046     		nop
 259              	@ 0 "" 2
 993:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 260              		.loc 2 993 3 discriminator 1 view .LVU59
 261              		.thumb
 262              		.syntax unified
 263 0010 FDE7     		b	.L12
 264              	.L14:
ARM GAS  /tmp/cc9pIOhy.s 			page 40


 265 0012 C046     		.align	2
 266              	.L13:
 267 0014 00ED00E0 		.word	-536810240
 268 0018 0400FA05 		.word	100270084
 269              		.cfi_endproc
 270              	.LFE39:
 272              		.section	.text.SysTick_Config,"ax",%progbits
 273              		.align	1
 274              		.syntax unified
 275              		.code	16
 276              		.thumb_func
 278              	SysTick_Config:
 279              	.LVL10:
 280              	.LFB48:
 996:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 997:Drivers/CMSIS/Include/core_cm0plus.h **** }
 998:Drivers/CMSIS/Include/core_cm0plus.h **** 
 999:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of CMSIS_Core_NVICFunctions */
1000:Drivers/CMSIS/Include/core_cm0plus.h **** 
1001:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################  MPU functions  #################################### */
1002:Drivers/CMSIS/Include/core_cm0plus.h **** 
1003:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1004:Drivers/CMSIS/Include/core_cm0plus.h **** 
1005:Drivers/CMSIS/Include/core_cm0plus.h **** #include "mpu_armv7.h"
1006:Drivers/CMSIS/Include/core_cm0plus.h **** 
1007:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
1008:Drivers/CMSIS/Include/core_cm0plus.h **** 
1009:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################  FPU functions  #################################### */
1010:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1011:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1012:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1013:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Function that provides FPU type.
1014:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
1015:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1016:Drivers/CMSIS/Include/core_cm0plus.h **** 
1017:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1018:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   get FPU type
1019:Drivers/CMSIS/Include/core_cm0plus.h ****   \details returns the FPU type
1020:Drivers/CMSIS/Include/core_cm0plus.h ****   \returns
1021:Drivers/CMSIS/Include/core_cm0plus.h ****    - \b  0: No FPU
1022:Drivers/CMSIS/Include/core_cm0plus.h ****    - \b  1: Single precision FPU
1023:Drivers/CMSIS/Include/core_cm0plus.h ****    - \b  2: Double + Single precision FPU
1024:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1025:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1026:Drivers/CMSIS/Include/core_cm0plus.h **** {
1027:Drivers/CMSIS/Include/core_cm0plus.h ****     return 0U;           /* No FPU */
1028:Drivers/CMSIS/Include/core_cm0plus.h **** }
1029:Drivers/CMSIS/Include/core_cm0plus.h **** 
1030:Drivers/CMSIS/Include/core_cm0plus.h **** 
1031:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of CMSIS_Core_FpuFunctions */
1032:Drivers/CMSIS/Include/core_cm0plus.h **** 
1033:Drivers/CMSIS/Include/core_cm0plus.h **** 
1034:Drivers/CMSIS/Include/core_cm0plus.h **** 
1035:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##################################    SysTick function  ########################################
1036:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1037:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1038:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
ARM GAS  /tmp/cc9pIOhy.s 			page 41


1039:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that configure the System.
1040:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
1041:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1042:Drivers/CMSIS/Include/core_cm0plus.h **** 
1043:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
1044:Drivers/CMSIS/Include/core_cm0plus.h **** 
1045:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1046:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   System Tick Configuration
1047:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1048:Drivers/CMSIS/Include/core_cm0plus.h ****            Counter is in free running mode to generate periodic interrupts.
1049:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1050:Drivers/CMSIS/Include/core_cm0plus.h ****   \return          0  Function succeeded.
1051:Drivers/CMSIS/Include/core_cm0plus.h ****   \return          1  Function failed.
1052:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1053:Drivers/CMSIS/Include/core_cm0plus.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1054:Drivers/CMSIS/Include/core_cm0plus.h ****            must contain a vendor-specific implementation of this function.
1055:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1056:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1057:Drivers/CMSIS/Include/core_cm0plus.h **** {
 281              		.loc 2 1057 1 view -0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		@ link register save eliminated.
1058:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 286              		.loc 2 1058 3 view .LVU61
 287              		.loc 2 1058 14 is_stmt 0 view .LVU62
 288 0000 0138     		subs	r0, r0, #1
 289              	.LVL11:
 290              		.loc 2 1058 6 view .LVU63
 291 0002 8023     		movs	r3, #128
 292 0004 5B04     		lsls	r3, r3, #17
 293 0006 9842     		cmp	r0, r3
 294 0008 0FD2     		bcs	.L17
1059:Drivers/CMSIS/Include/core_cm0plus.h ****   {
1060:Drivers/CMSIS/Include/core_cm0plus.h ****     return (1UL);                                                   /* Reload value impossible */
1061:Drivers/CMSIS/Include/core_cm0plus.h ****   }
1062:Drivers/CMSIS/Include/core_cm0plus.h **** 
1063:Drivers/CMSIS/Include/core_cm0plus.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 295              		.loc 2 1063 3 is_stmt 1 view .LVU64
 296              		.loc 2 1063 18 is_stmt 0 view .LVU65
 297 000a 094A     		ldr	r2, .L18
 298 000c 5060     		str	r0, [r2, #4]
1064:Drivers/CMSIS/Include/core_cm0plus.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 299              		.loc 2 1064 3 is_stmt 1 view .LVU66
 300              	.LVL12:
 301              	.LBB36:
 302              	.LBI36:
 850:Drivers/CMSIS/Include/core_cm0plus.h **** {
 303              		.loc 2 850 22 view .LVU67
 304              	.LBB37:
 852:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 305              		.loc 2 852 3 view .LVU68
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 306              		.loc 2 859 5 view .LVU69
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 307              		.loc 2 859 52 is_stmt 0 view .LVU70
ARM GAS  /tmp/cc9pIOhy.s 			page 42


 308 000e 0948     		ldr	r0, .L18+4
 309              	.LVL13:
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 310              		.loc 2 859 52 view .LVU71
 311 0010 036A     		ldr	r3, [r0, #32]
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 312              		.loc 2 859 33 view .LVU72
 313 0012 1B02     		lsls	r3, r3, #8
 314 0014 1B0A     		lsrs	r3, r3, #8
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 315              		.loc 2 859 102 view .LVU73
 316 0016 C021     		movs	r1, #192
 317 0018 0906     		lsls	r1, r1, #24
 318 001a 0B43     		orrs	r3, r1
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 319              		.loc 2 859 30 view .LVU74
 320 001c 0362     		str	r3, [r0, #32]
 321              	.LVL14:
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 322              		.loc 2 859 30 view .LVU75
 323              	.LBE37:
 324              	.LBE36:
1065:Drivers/CMSIS/Include/core_cm0plus.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 325              		.loc 2 1065 3 is_stmt 1 view .LVU76
 326              		.loc 2 1065 18 is_stmt 0 view .LVU77
 327 001e 0023     		movs	r3, #0
 328 0020 9360     		str	r3, [r2, #8]
1066:Drivers/CMSIS/Include/core_cm0plus.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 329              		.loc 2 1066 3 is_stmt 1 view .LVU78
 330              		.loc 2 1066 18 is_stmt 0 view .LVU79
 331 0022 0733     		adds	r3, r3, #7
 332 0024 1360     		str	r3, [r2]
1067:Drivers/CMSIS/Include/core_cm0plus.h ****                    SysTick_CTRL_TICKINT_Msk   |
1068:Drivers/CMSIS/Include/core_cm0plus.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
1069:Drivers/CMSIS/Include/core_cm0plus.h ****   return (0UL);                                                     /* Function successful */
 333              		.loc 2 1069 3 is_stmt 1 view .LVU80
 334              		.loc 2 1069 10 is_stmt 0 view .LVU81
 335 0026 0020     		movs	r0, #0
 336              	.L15:
1070:Drivers/CMSIS/Include/core_cm0plus.h **** }
 337              		.loc 2 1070 1 view .LVU82
 338              		@ sp needed
 339 0028 7047     		bx	lr
 340              	.L17:
1060:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 341              		.loc 2 1060 12 view .LVU83
 342 002a 0120     		movs	r0, #1
 343 002c FCE7     		b	.L15
 344              	.L19:
 345 002e C046     		.align	2
 346              	.L18:
 347 0030 10E000E0 		.word	-536813552
 348 0034 00ED00E0 		.word	-536810240
 349              		.cfi_endproc
 350              	.LFE48:
 352              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
 353              		.align	1
ARM GAS  /tmp/cc9pIOhy.s 			page 43


 354              		.global	HAL_NVIC_SetPriority
 355              		.syntax unified
 356              		.code	16
 357              		.thumb_func
 359              	HAL_NVIC_SetPriority:
 360              	.LVL15:
 361              	.LFB358:
   1:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
   2:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ******************************************************************************
   3:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @file    stm32g0xx_hal_cortex.c
   4:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @author  MCD Application Team
   5:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *          functionalities of the CORTEX:
   8:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *           + Initialization and Configuration functions
   9:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *           + Peripheral Control functions
  10:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *
  11:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   @verbatim
  12:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
  13:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                         ##### How to use this driver #####
  14:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
  15:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     [..]
  16:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  17:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     ===========================================================
  18:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     [..]
  19:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  20:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     The Cortex M0+ exceptions are managed by CMSIS functions.
  21:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       (#) Enable and Configure the priority of the selected IRQ Channels.
  22:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****              The priority can be 0..3.
  23:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  24:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         -@- Lower priority values gives higher priority.
  25:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         -@- Priority Order:
  26:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****             (#@) Lowest priority.
  27:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****             (#@) Lowest hardware priority (IRQn position).
  28:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  29:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority()
  30:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  31:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ()
  32:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  33:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       -@-  Negative value of IRQn_Type are not allowed.
  34:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  35:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  36:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     ========================================================
  37:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     [..]
  38:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     Setup SysTick Timer for time base.
  39:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  40:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  41:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        is a CMSIS function that:
  42:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  43:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value (0x03).
  44:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  45:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  46:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  47:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  48:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  49:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
  50:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
ARM GAS  /tmp/cc9pIOhy.s 			page 44


  51:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
  52:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        inside the stm32g0xx_hal_cortex.h file.
  53:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  54:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  55:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  56:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  57:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  58:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  59:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  60:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  61:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  62:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  63:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  64:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   @endverbatim
  65:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ******************************************************************************
  66:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @attention
  67:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *
  68:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics. 
  69:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * All rights reserved.</center></h2>
  70:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *
  71:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  72:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * the "License"; You may not use this file except in compliance with the 
  73:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * License. You may obtain a copy of the License at:
  74:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  75:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *
  76:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ******************************************************************************
  77:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
  78:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  79:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
  80:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** #include "stm32g0xx_hal.h"
  81:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  82:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /** @addtogroup STM32G0xx_HAL_Driver
  83:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @{
  84:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
  85:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  86:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /** @addtogroup CORTEX
  87:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @{
  88:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
  89:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  90:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
  91:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  92:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Private types -------------------------------------------------------------*/
  93:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
  94:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Private constants ---------------------------------------------------------*/
  95:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Private macros ------------------------------------------------------------*/
  96:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Private function prototypes -----------------------------------------------*/
  97:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Exported functions --------------------------------------------------------*/
  98:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  99:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions
 100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @{
 101:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 102:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 103:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 104:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions_Group1
 105:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions
 106:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****  *
 107:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** @verbatim
ARM GAS  /tmp/cc9pIOhy.s 			page 45


 108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
 109:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ##### Initialization and Configuration functions #####
 110:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
 111:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     [..]
 112:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 113:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       Systick functionalities
 114:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 115:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** @endverbatim
 116:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @{
 117:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 118:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 119:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 120:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief Sets the priority of an interrupt.
 121:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param IRQn External interrupt number .
 122:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 123:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32g0xx.h file)
 124:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param PreemptPriority The preemption priority for the IRQn channel.
 125:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 3.
 126:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority
 127:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param SubPriority the subpriority level for the IRQ channel.
 128:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
 129:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         no subpriority supported in Cortex M0+ based products.
 130:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 131:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 132:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 133:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 362              		.loc 1 133 1 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366              		.loc 1 133 1 is_stmt 0 view .LVU85
 367 0000 10B5     		push	{r4, lr}
 368              	.LCFI1:
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 4, -8
 371              		.cfi_offset 14, -4
 134:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 135:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 372              		.loc 1 135 3 is_stmt 1 view .LVU86
 136:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_SetPriority(IRQn,PreemptPriority);
 373              		.loc 1 136 3 view .LVU87
 374 0002 FFF7FEFF 		bl	__NVIC_SetPriority
 375              	.LVL16:
 137:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 376              		.loc 1 137 1 is_stmt 0 view .LVU88
 377              		@ sp needed
 378 0006 10BD     		pop	{r4, pc}
 379              		.cfi_endproc
 380              	.LFE358:
 382              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 383              		.align	1
 384              		.global	HAL_NVIC_EnableIRQ
 385              		.syntax unified
 386              		.code	16
 387              		.thumb_func
 389              	HAL_NVIC_EnableIRQ:
 390              	.LVL17:
ARM GAS  /tmp/cc9pIOhy.s 			page 46


 391              	.LFB359:
 138:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 139:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 140:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Enable a device specific interrupt in the NVIC interrupt controller.
 141:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 142:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 143:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 144:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 145:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 146:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 147:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 392              		.loc 1 147 1 is_stmt 1 view -0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 148:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 149:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 397              		.loc 1 149 3 view .LVU90
 150:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 151:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Enable interrupt */
 152:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 398              		.loc 1 152 3 view .LVU91
 399              	.LBB38:
 400              	.LBI38:
 741:Drivers/CMSIS/Include/core_cm0plus.h **** {
 401              		.loc 2 741 22 view .LVU92
 402              	.LBB39:
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 403              		.loc 2 743 3 view .LVU93
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 404              		.loc 2 743 6 is_stmt 0 view .LVU94
 405 0000 0028     		cmp	r0, #0
 406 0002 05DB     		blt	.L21
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 407              		.loc 2 745 5 is_stmt 1 view .LVU95
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 408              		.loc 2 746 5 view .LVU96
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 409              		.loc 2 746 58 is_stmt 0 view .LVU97
 410 0004 1F22     		movs	r2, #31
 411 0006 0240     		ands	r2, r0
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 412              		.loc 2 746 22 view .LVU98
 413 0008 0123     		movs	r3, #1
 414 000a 9340     		lsls	r3, r3, r2
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 415              		.loc 2 746 20 view .LVU99
 416 000c 014A     		ldr	r2, .L23
 417 000e 1360     		str	r3, [r2]
 747:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 418              		.loc 2 747 5 is_stmt 1 view .LVU100
 419              	.LVL18:
 420              	.L21:
 747:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 421              		.loc 2 747 5 is_stmt 0 view .LVU101
 422              	.LBE39:
ARM GAS  /tmp/cc9pIOhy.s 			page 47


 423              	.LBE38:
 153:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 424              		.loc 1 153 1 view .LVU102
 425              		@ sp needed
 426 0010 7047     		bx	lr
 427              	.L24:
 428 0012 C046     		.align	2
 429              	.L23:
 430 0014 00E100E0 		.word	-536813312
 431              		.cfi_endproc
 432              	.LFE359:
 434              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 435              		.align	1
 436              		.global	HAL_NVIC_DisableIRQ
 437              		.syntax unified
 438              		.code	16
 439              		.thumb_func
 441              	HAL_NVIC_DisableIRQ:
 442              	.LVL19:
 443              	.LFB360:
 154:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 155:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 156:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Disable a device specific interrupt in the NVIC interrupt controller.
 157:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 158:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 159:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 160:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 161:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 162:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 163:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 444              		.loc 1 163 1 is_stmt 1 view -0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 164:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 165:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 449              		.loc 1 165 3 view .LVU104
 166:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 167:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Disable interrupt */
 168:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 450              		.loc 1 168 3 view .LVU105
 451              	.LBB40:
 452              	.LBI40:
 779:Drivers/CMSIS/Include/core_cm0plus.h **** {
 453              		.loc 2 779 22 view .LVU106
 454              	.LBB41:
 781:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 455              		.loc 2 781 3 view .LVU107
 781:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 456              		.loc 2 781 6 is_stmt 0 view .LVU108
 457 0000 0028     		cmp	r0, #0
 458 0002 0ADB     		blt	.L25
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 459              		.loc 2 783 5 is_stmt 1 view .LVU109
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 460              		.loc 2 783 58 is_stmt 0 view .LVU110
ARM GAS  /tmp/cc9pIOhy.s 			page 48


 461 0004 1F22     		movs	r2, #31
 462 0006 0240     		ands	r2, r0
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 463              		.loc 2 783 22 view .LVU111
 464 0008 0123     		movs	r3, #1
 465 000a 9340     		lsls	r3, r3, r2
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 466              		.loc 2 783 20 view .LVU112
 467 000c 0349     		ldr	r1, .L27
 468 000e 8022     		movs	r2, #128
 469 0010 8B50     		str	r3, [r1, r2]
 784:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 470              		.loc 2 784 5 is_stmt 1 view .LVU113
 471              	.LBB42:
 472              	.LBI42:
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 473              		.loc 3 944 27 view .LVU114
 474              	.LBB43:
 475              		.loc 3 946 3 view .LVU115
 476              		.syntax divided
 477              	@ 946 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 478 0012 BFF34F8F 		dsb 0xF
 479              	@ 0 "" 2
 480              		.thumb
 481              		.syntax unified
 482              	.LBE43:
 483              	.LBE42:
 785:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 484              		.loc 2 785 5 view .LVU116
 485              	.LBB44:
 486              	.LBI44:
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 487              		.loc 3 933 27 view .LVU117
 488              	.LBB45:
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 489              		.loc 3 935 3 view .LVU118
 490              		.syntax divided
 491              	@ 935 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 492 0016 BFF36F8F 		isb 0xF
 493              	@ 0 "" 2
 494              	.LVL20:
 495              		.thumb
 496              		.syntax unified
 497              	.L25:
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 498              		.loc 3 935 3 is_stmt 0 view .LVU119
 499              	.LBE45:
 500              	.LBE44:
 501              	.LBE41:
 502              	.LBE40:
 169:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 503              		.loc 1 169 1 view .LVU120
 504              		@ sp needed
 505 001a 7047     		bx	lr
 506              	.L28:
 507              		.align	2
 508              	.L27:
ARM GAS  /tmp/cc9pIOhy.s 			page 49


 509 001c 00E100E0 		.word	-536813312
 510              		.cfi_endproc
 511              	.LFE360:
 513              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 514              		.align	1
 515              		.global	HAL_NVIC_SystemReset
 516              		.syntax unified
 517              		.code	16
 518              		.thumb_func
 520              	HAL_NVIC_SystemReset:
 521              	.LFB361:
 170:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 171:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Initiate a system reset request to reset the MCU.
 173:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 174:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 175:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 176:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 522              		.loc 1 176 1 is_stmt 1 view -0
 523              		.cfi_startproc
 524              		@ Volatile: function does not return.
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527 0000 10B5     		push	{r4, lr}
 528              	.LCFI2:
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 4, -8
 531              		.cfi_offset 14, -4
 177:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* System Reset */
 178:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_SystemReset();
 532              		.loc 1 178 3 view .LVU122
 533 0002 FFF7FEFF 		bl	__NVIC_SystemReset
 534              	.LVL21:
 535              		.cfi_endproc
 536              	.LFE361:
 538              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 539              		.align	1
 540              		.global	HAL_SYSTICK_Config
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	HAL_SYSTICK_Config:
 546              	.LVL22:
 547              	.LFB362:
 179:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 180:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 181:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 182:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Initialize the System Timer with interrupt enabled and start the System Tick Timer (Sys
 183:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 184:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 185:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 186:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *                  - 1  Function failed.
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 188:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 189:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 548              		.loc 1 189 1 view -0
 549              		.cfi_startproc
ARM GAS  /tmp/cc9pIOhy.s 			page 50


 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              		.loc 1 189 1 is_stmt 0 view .LVU124
 553 0000 10B5     		push	{r4, lr}
 554              	.LCFI3:
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 4, -8
 557              		.cfi_offset 14, -4
 190:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   return SysTick_Config(TicksNumb);
 558              		.loc 1 190 3 is_stmt 1 view .LVU125
 559              		.loc 1 190 10 is_stmt 0 view .LVU126
 560 0002 FFF7FEFF 		bl	SysTick_Config
 561              	.LVL23:
 191:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 562              		.loc 1 191 1 view .LVU127
 563              		@ sp needed
 564 0006 10BD     		pop	{r4, pc}
 565              		.cfi_endproc
 566              	.LFE362:
 568              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 569              		.align	1
 570              		.global	HAL_NVIC_GetPriority
 571              		.syntax unified
 572              		.code	16
 573              		.thumb_func
 575              	HAL_NVIC_GetPriority:
 576              	.LVL24:
 577              	.LFB363:
 192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 193:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @}
 194:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 196:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions_Group2
 197:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****  *  @brief   Cortex control functions
 198:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****  *
 199:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** @verbatim
 200:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
 201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 202:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
 203:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     [..]
 204:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 205:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       (NVIC, SYSTICK, MPU) functionalities.
 206:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 207:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 208:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** @endverbatim
 209:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @{
 210:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 211:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 212:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 213:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Get the priority of an interrupt.
 214:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 218:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 219:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
 220:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
ARM GAS  /tmp/cc9pIOhy.s 			page 51


 578              		.loc 1 220 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              		.loc 1 220 1 is_stmt 0 view .LVU129
 583 0000 10B5     		push	{r4, lr}
 584              	.LCFI4:
 585              		.cfi_def_cfa_offset 8
 586              		.cfi_offset 4, -8
 587              		.cfi_offset 14, -4
 221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Get priority for Cortex-M system or device specific interrupts */
 222:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   return NVIC_GetPriority(IRQn);
 588              		.loc 1 222 3 is_stmt 1 view .LVU130
 589              		.loc 1 222 10 is_stmt 0 view .LVU131
 590 0002 FFF7FEFF 		bl	__NVIC_GetPriority
 591              	.LVL25:
 223:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 592              		.loc 1 223 1 view .LVU132
 593              		@ sp needed
 594 0006 10BD     		pop	{r4, pc}
 595              		.cfi_endproc
 596              	.LFE363:
 598              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 599              		.align	1
 600              		.global	HAL_NVIC_SetPendingIRQ
 601              		.syntax unified
 602              		.code	16
 603              		.thumb_func
 605              	HAL_NVIC_SetPendingIRQ:
 606              	.LVL26:
 607              	.LFB364:
 224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 225:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 226:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Set Pending bit of an external interrupt.
 227:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 228:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 229:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 230:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 231:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 232:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 608              		.loc 1 233 1 is_stmt 1 view -0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              		@ link register save eliminated.
 234:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 235:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 613              		.loc 1 235 3 view .LVU134
 236:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Set interrupt pending */
 238:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 614              		.loc 1 238 3 view .LVU135
 615              	.LBB46:
 616              	.LBI46:
 817:Drivers/CMSIS/Include/core_cm0plus.h **** {
 617              		.loc 2 817 22 view .LVU136
ARM GAS  /tmp/cc9pIOhy.s 			page 52


 618              	.LBB47:
 819:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 619              		.loc 2 819 3 view .LVU137
 819:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 620              		.loc 2 819 6 is_stmt 0 view .LVU138
 621 0000 0028     		cmp	r0, #0
 622 0002 07DB     		blt	.L32
 821:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 623              		.loc 2 821 5 is_stmt 1 view .LVU139
 821:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 624              		.loc 2 821 58 is_stmt 0 view .LVU140
 625 0004 1F22     		movs	r2, #31
 626 0006 0240     		ands	r2, r0
 821:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 627              		.loc 2 821 22 view .LVU141
 628 0008 0123     		movs	r3, #1
 629 000a 9340     		lsls	r3, r3, r2
 821:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 630              		.loc 2 821 20 view .LVU142
 631 000c 0249     		ldr	r1, .L34
 632 000e 8022     		movs	r2, #128
 633 0010 5200     		lsls	r2, r2, #1
 634 0012 8B50     		str	r3, [r1, r2]
 635              	.LVL27:
 636              	.L32:
 821:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 637              		.loc 2 821 20 view .LVU143
 638              	.LBE47:
 639              	.LBE46:
 239:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 640              		.loc 1 239 1 view .LVU144
 641              		@ sp needed
 642 0014 7047     		bx	lr
 643              	.L35:
 644 0016 C046     		.align	2
 645              	.L34:
 646 0018 00E100E0 		.word	-536813312
 647              		.cfi_endproc
 648              	.LFE364:
 650              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 651              		.align	1
 652              		.global	HAL_NVIC_GetPendingIRQ
 653              		.syntax unified
 654              		.code	16
 655              		.thumb_func
 657              	HAL_NVIC_GetPendingIRQ:
 658              	.LVL28:
 659              	.LFB365:
 240:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 241:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 242:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Get Pending Interrupt (read the pending register in the NVIC
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         and return the pending bit for the specified interrupt).
 244:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 245:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 246:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 247:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 248:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
ARM GAS  /tmp/cc9pIOhy.s 			page 53


 249:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 250:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 251:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 660              		.loc 1 251 1 is_stmt 1 view -0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664              		@ link register save eliminated.
 252:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 253:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 665              		.loc 1 253 3 view .LVU146
 254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 666              		.loc 1 256 3 view .LVU147
 667              	.LBB48:
 668              	.LBI48:
 798:Drivers/CMSIS/Include/core_cm0plus.h **** {
 669              		.loc 2 798 26 view .LVU148
 670              	.LBB49:
 800:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 671              		.loc 2 800 3 view .LVU149
 800:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 672              		.loc 2 800 6 is_stmt 0 view .LVU150
 673 0000 0028     		cmp	r0, #0
 674 0002 09DB     		blt	.L38
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 675              		.loc 2 802 5 is_stmt 1 view .LVU151
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 676              		.loc 2 802 35 is_stmt 0 view .LVU152
 677 0004 054A     		ldr	r2, .L39
 678 0006 8023     		movs	r3, #128
 679 0008 5B00     		lsls	r3, r3, #1
 680 000a D358     		ldr	r3, [r2, r3]
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 681              		.loc 2 802 68 view .LVU153
 682 000c 1F22     		movs	r2, #31
 683 000e 0240     		ands	r2, r0
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 684              		.loc 2 802 80 view .LVU154
 685 0010 D340     		lsrs	r3, r3, r2
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 686              		.loc 2 802 12 view .LVU155
 687 0012 0120     		movs	r0, #1
 688              	.LVL29:
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 689              		.loc 2 802 12 view .LVU156
 690 0014 1840     		ands	r0, r3
 691              	.LVL30:
 692              	.L36:
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 693              		.loc 2 802 12 view .LVU157
 694              	.LBE49:
 695              	.LBE48:
 257:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 696              		.loc 1 257 1 view .LVU158
 697              		@ sp needed
ARM GAS  /tmp/cc9pIOhy.s 			page 54


 698 0016 7047     		bx	lr
 699              	.LVL31:
 700              	.L38:
 701              	.LBB51:
 702              	.LBB50:
 806:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 703              		.loc 2 806 11 view .LVU159
 704 0018 0020     		movs	r0, #0
 705              	.LVL32:
 806:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 706              		.loc 2 806 11 view .LVU160
 707              	.LBE50:
 708              	.LBE51:
 256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 709              		.loc 1 256 10 view .LVU161
 710 001a FCE7     		b	.L36
 711              	.L40:
 712              		.align	2
 713              	.L39:
 714 001c 00E100E0 		.word	-536813312
 715              		.cfi_endproc
 716              	.LFE365:
 718              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 719              		.align	1
 720              		.global	HAL_NVIC_ClearPendingIRQ
 721              		.syntax unified
 722              		.code	16
 723              		.thumb_func
 725              	HAL_NVIC_ClearPendingIRQ:
 726              	.LVL33:
 727              	.LFB366:
 258:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 259:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 260:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Clear the pending bit of an external interrupt.
 261:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 263:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 264:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 265:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 266:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 267:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 728              		.loc 1 267 1 is_stmt 1 view -0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		@ link register save eliminated.
 268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 269:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 733              		.loc 1 269 3 view .LVU163
 270:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Clear pending interrupt */
 272:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 734              		.loc 1 272 3 view .LVU164
 735              	.LBB52:
 736              	.LBI52:
 832:Drivers/CMSIS/Include/core_cm0plus.h **** {
 737              		.loc 2 832 22 view .LVU165
ARM GAS  /tmp/cc9pIOhy.s 			page 55


 738              	.LBB53:
 834:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 739              		.loc 2 834 3 view .LVU166
 834:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 740              		.loc 2 834 6 is_stmt 0 view .LVU167
 741 0000 0028     		cmp	r0, #0
 742 0002 07DB     		blt	.L41
 836:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 743              		.loc 2 836 5 is_stmt 1 view .LVU168
 836:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 744              		.loc 2 836 58 is_stmt 0 view .LVU169
 745 0004 1F22     		movs	r2, #31
 746 0006 0240     		ands	r2, r0
 836:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 747              		.loc 2 836 22 view .LVU170
 748 0008 0123     		movs	r3, #1
 749 000a 9340     		lsls	r3, r3, r2
 836:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 750              		.loc 2 836 20 view .LVU171
 751 000c 0249     		ldr	r1, .L43
 752 000e C022     		movs	r2, #192
 753 0010 5200     		lsls	r2, r2, #1
 754 0012 8B50     		str	r3, [r1, r2]
 755              	.LVL34:
 756              	.L41:
 836:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 757              		.loc 2 836 20 view .LVU172
 758              	.LBE53:
 759              	.LBE52:
 273:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 760              		.loc 1 273 1 view .LVU173
 761              		@ sp needed
 762 0014 7047     		bx	lr
 763              	.L44:
 764 0016 C046     		.align	2
 765              	.L43:
 766 0018 00E100E0 		.word	-536813312
 767              		.cfi_endproc
 768              	.LFE366:
 770              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 771              		.align	1
 772              		.global	HAL_SYSTICK_CLKSourceConfig
 773              		.syntax unified
 774              		.code	16
 775              		.thumb_func
 777              	HAL_SYSTICK_CLKSourceConfig:
 778              	.LVL35:
 779              	.LFB367:
 274:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 276:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Configure the SysTick clock source.
 277:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param CLKSource specifies the SysTick clock source.
 278:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 279:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 280:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 281:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 282:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
ARM GAS  /tmp/cc9pIOhy.s 			page 56


 283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 780              		.loc 1 284 1 is_stmt 1 view -0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 784              		@ link register save eliminated.
 285:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 286:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 785              		.loc 1 286 3 view .LVU175
 287:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 786              		.loc 1 287 3 view .LVU176
 787              		.loc 1 287 6 is_stmt 0 view .LVU177
 788 0000 0428     		cmp	r0, #4
 789 0002 05D0     		beq	.L48
 288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   {
 289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 290:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   else
 292:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   {
 293:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 790              		.loc 1 293 5 is_stmt 1 view .LVU178
 791              		.loc 1 293 12 is_stmt 0 view .LVU179
 792 0004 054A     		ldr	r2, .L49
 793 0006 1368     		ldr	r3, [r2]
 794              		.loc 1 293 19 view .LVU180
 795 0008 0421     		movs	r1, #4
 796 000a 8B43     		bics	r3, r1
 797 000c 1360     		str	r3, [r2]
 798              	.L45:
 294:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 295:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 799              		.loc 1 295 1 view .LVU181
 800              		@ sp needed
 801 000e 7047     		bx	lr
 802              	.L48:
 289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 803              		.loc 1 289 5 is_stmt 1 view .LVU182
 289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 804              		.loc 1 289 12 is_stmt 0 view .LVU183
 805 0010 024A     		ldr	r2, .L49
 806 0012 1368     		ldr	r3, [r2]
 289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 807              		.loc 1 289 19 view .LVU184
 808 0014 0421     		movs	r1, #4
 809 0016 0B43     		orrs	r3, r1
 810 0018 1360     		str	r3, [r2]
 811 001a F8E7     		b	.L45
 812              	.L50:
 813              		.align	2
 814              	.L49:
 815 001c 10E000E0 		.word	-536813552
 816              		.cfi_endproc
 817              	.LFE367:
 819              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 820              		.align	1
 821              		.weak	HAL_SYSTICK_Callback
ARM GAS  /tmp/cc9pIOhy.s 			page 57


 822              		.syntax unified
 823              		.code	16
 824              		.thumb_func
 826              	HAL_SYSTICK_Callback:
 827              	.LFB369:
 296:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 297:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Handle SYSTICK interrupt request.
 299:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 301:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 302:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 303:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 305:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 306:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 307:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 308:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 309:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 310:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 311:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 828              		.loc 1 311 1 is_stmt 1 view -0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 0, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 312:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 313:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****             the HAL_SYSTICK_Callback could be implemented in the user file
 314:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****    */
 315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 833              		.loc 1 315 1 view .LVU186
 834              		@ sp needed
 835 0000 7047     		bx	lr
 836              		.cfi_endproc
 837              	.LFE369:
 839              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 840              		.align	1
 841              		.global	HAL_SYSTICK_IRQHandler
 842              		.syntax unified
 843              		.code	16
 844              		.thumb_func
 846              	HAL_SYSTICK_IRQHandler:
 847              	.LFB368:
 302:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 848              		.loc 1 302 1 view -0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852 0000 10B5     		push	{r4, lr}
 853              	.LCFI5:
 854              		.cfi_def_cfa_offset 8
 855              		.cfi_offset 4, -8
 856              		.cfi_offset 14, -4
 303:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 857              		.loc 1 303 3 view .LVU188
 858 0002 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 859              	.LVL36:
ARM GAS  /tmp/cc9pIOhy.s 			page 58


 304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 860              		.loc 1 304 1 is_stmt 0 view .LVU189
 861              		@ sp needed
 862 0006 10BD     		pop	{r4, pc}
 863              		.cfi_endproc
 864              	.LFE368:
 866              		.section	.text.HAL_MPU_Enable,"ax",%progbits
 867              		.align	1
 868              		.global	HAL_MPU_Enable
 869              		.syntax unified
 870              		.code	16
 871              		.thumb_func
 873              	HAL_MPU_Enable:
 874              	.LVL37:
 875              	.LFB370:
 316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** #if (__MPU_PRESENT == 1U)
 318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 319:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Enable the MPU.
 320:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  MPU_Control Specifies the control mode of the MPU during hard fault,
 321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *          NMI, FAULTMASK and privileged access to the default memory
 322:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF_NONE
 324:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *            @arg MPU_HARDFAULT_NMI
 325:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *            @arg MPU_PRIVILEGED_DEFAULT
 326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF
 327:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 328:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 329:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_MPU_Enable(uint32_t MPU_Control)
 330:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 876              		.loc 1 330 1 is_stmt 1 view -0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              		@ link register save eliminated.
 331:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Enable the MPU */
 332:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 881              		.loc 1 332 3 view .LVU191
 882              		.loc 1 332 28 is_stmt 0 view .LVU192
 883 0000 0123     		movs	r3, #1
 884 0002 1843     		orrs	r0, r3
 885              	.LVL38:
 886              		.loc 1 332 13 view .LVU193
 887 0004 034B     		ldr	r3, .L54
 888 0006 5860     		str	r0, [r3, #4]
 333:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 334:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Ensure MPU setting take effects */
 335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   __DSB();
 889              		.loc 1 335 3 is_stmt 1 view .LVU194
 890              	.LBB54:
 891              	.LBI54:
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892              		.loc 3 944 27 view .LVU195
 893              	.LBB55:
 894              		.loc 3 946 3 view .LVU196
 895              		.syntax divided
 896              	@ 946 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc9pIOhy.s 			page 59


 897 0008 BFF34F8F 		dsb 0xF
 898              	@ 0 "" 2
 899              		.thumb
 900              		.syntax unified
 901              	.LBE55:
 902              	.LBE54:
 336:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   __ISB();
 903              		.loc 1 336 3 view .LVU197
 904              	.LBB56:
 905              	.LBI56:
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 906              		.loc 3 933 27 view .LVU198
 907              	.LBB57:
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 908              		.loc 3 935 3 view .LVU199
 909              		.syntax divided
 910              	@ 935 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 911 000c BFF36F8F 		isb 0xF
 912              	@ 0 "" 2
 913              		.thumb
 914              		.syntax unified
 915              	.LBE57:
 916              	.LBE56:
 337:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 917              		.loc 1 337 1 is_stmt 0 view .LVU200
 918              		@ sp needed
 919 0010 7047     		bx	lr
 920              	.L55:
 921 0012 C046     		.align	2
 922              	.L54:
 923 0014 90ED00E0 		.word	-536810096
 924              		.cfi_endproc
 925              	.LFE370:
 927              		.section	.text.HAL_MPU_Disable,"ax",%progbits
 928              		.align	1
 929              		.global	HAL_MPU_Disable
 930              		.syntax unified
 931              		.code	16
 932              		.thumb_func
 934              	HAL_MPU_Disable:
 935              	.LFB371:
 338:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 339:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 340:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 341:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Disable the MPU.
 342:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 343:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 344:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_MPU_Disable(void)
 345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 936              		.loc 1 345 1 is_stmt 1 view -0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 0, uses_anonymous_args = 0
 940              		@ link register save eliminated.
 346:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Make sure outstanding transfers are done */
 347:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   __DMB();
 941              		.loc 1 347 3 view .LVU202
ARM GAS  /tmp/cc9pIOhy.s 			page 60


 942              	.LBB58:
 943              	.LBI58:
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 944              		.loc 3 955 27 view .LVU203
 945              	.LBB59:
 956:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 946              		.loc 3 957 3 view .LVU204
 947              		.syntax divided
 948              	@ 957 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 949 0000 BFF35F8F 		dmb 0xF
 950              	@ 0 "" 2
 951              		.thumb
 952              		.syntax unified
 953              	.LBE59:
 954              	.LBE58:
 348:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 349:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Disable the MPU and clear the control register*/
 350:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->CTRL  = 0;
 955              		.loc 1 350 3 view .LVU205
 956              		.loc 1 350 14 is_stmt 0 view .LVU206
 957 0004 014B     		ldr	r3, .L57
 958 0006 0022     		movs	r2, #0
 959 0008 5A60     		str	r2, [r3, #4]
 351:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 960              		.loc 1 351 1 view .LVU207
 961              		@ sp needed
 962 000a 7047     		bx	lr
 963              	.L58:
 964              		.align	2
 965              	.L57:
 966 000c 90ED00E0 		.word	-536810096
 967              		.cfi_endproc
 968              	.LFE371:
 970              		.section	.text.HAL_MPU_ConfigRegion,"ax",%progbits
 971              		.align	1
 972              		.global	HAL_MPU_ConfigRegion
 973              		.syntax unified
 974              		.code	16
 975              		.thumb_func
 977              	HAL_MPU_ConfigRegion:
 978              	.LVL39:
 979              	.LFB372:
 352:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 353:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 354:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 355:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Initialize and configure the Region and the memory to be protected.
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
 357:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *                the initialization and configuration information.
ARM GAS  /tmp/cc9pIOhy.s 			page 61


 358:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 359:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
 361:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 980              		.loc 1 361 1 is_stmt 1 view -0
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 0
 983              		@ frame_needed = 0, uses_anonymous_args = 0
 984              		@ link register save eliminated.
 362:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 363:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 985              		.loc 1 363 3 view .LVU209
 364:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 986              		.loc 1 364 3 view .LVU210
 365:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 366:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Set the Region number */
 367:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->RNR = MPU_Init->Number;
 987              		.loc 1 367 3 view .LVU211
 988              		.loc 1 367 22 is_stmt 0 view .LVU212
 989 0000 4278     		ldrb	r2, [r0, #1]
 990              		.loc 1 367 12 view .LVU213
 991 0002 144B     		ldr	r3, .L62
 992 0004 9A60     		str	r2, [r3, #8]
 368:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 369:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   if ((MPU_Init->Enable) != 0U)
 993              		.loc 1 369 3 is_stmt 1 view .LVU214
 994              		.loc 1 369 16 is_stmt 0 view .LVU215
 995 0006 0378     		ldrb	r3, [r0]
 996              		.loc 1 369 6 view .LVU216
 997 0008 002B     		cmp	r3, #0
 998 000a 1DD0     		beq	.L60
 370:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   {
 371:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     /* Check the parameters */
 372:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 999              		.loc 1 372 5 is_stmt 1 view .LVU217
 373:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 1000              		.loc 1 373 5 view .LVU218
 374:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 1001              		.loc 1 374 5 view .LVU219
 375:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 1002              		.loc 1 375 5 view .LVU220
 376:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 1003              		.loc 1 376 5 view .LVU221
 377:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 1004              		.loc 1 377 5 view .LVU222
 378:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 1005              		.loc 1 378 5 view .LVU223
 379:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 1006              		.loc 1 379 5 view .LVU224
 380:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 381:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     MPU->RBAR = MPU_Init->BaseAddress;
 1007              		.loc 1 381 5 view .LVU225
 1008              		.loc 1 381 25 is_stmt 0 view .LVU226
 1009 000c 4368     		ldr	r3, [r0, #4]
 1010              		.loc 1 381 15 view .LVU227
 1011 000e 1149     		ldr	r1, .L62
 1012 0010 CB60     		str	r3, [r1, #12]
ARM GAS  /tmp/cc9pIOhy.s 			page 62


 382:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 1013              		.loc 1 382 5 is_stmt 1 view .LVU228
 1014              		.loc 1 382 36 is_stmt 0 view .LVU229
 1015 0012 037B     		ldrb	r3, [r0, #12]
 1016              		.loc 1 382 62 view .LVU230
 1017 0014 1B07     		lsls	r3, r3, #28
 383:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 1018              		.loc 1 383 36 view .LVU231
 1019 0016 C27A     		ldrb	r2, [r0, #11]
 1020              		.loc 1 383 62 view .LVU232
 1021 0018 1206     		lsls	r2, r2, #24
 382:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 1022              		.loc 1 382 84 view .LVU233
 1023 001a 1343     		orrs	r3, r2
 384:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 1024              		.loc 1 384 36 view .LVU234
 1025 001c 827A     		ldrb	r2, [r0, #10]
 1026              		.loc 1 384 62 view .LVU235
 1027 001e D204     		lsls	r2, r2, #19
 383:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 1028              		.loc 1 383 84 view .LVU236
 1029 0020 1343     		orrs	r3, r2
 385:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 1030              		.loc 1 385 36 view .LVU237
 1031 0022 427B     		ldrb	r2, [r0, #13]
 1032              		.loc 1 385 62 view .LVU238
 1033 0024 9204     		lsls	r2, r2, #18
 384:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 1034              		.loc 1 384 84 view .LVU239
 1035 0026 1343     		orrs	r3, r2
 386:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 1036              		.loc 1 386 36 view .LVU240
 1037 0028 827B     		ldrb	r2, [r0, #14]
 1038              		.loc 1 386 62 view .LVU241
 1039 002a 5204     		lsls	r2, r2, #17
 385:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 1040              		.loc 1 385 84 view .LVU242
 1041 002c 1343     		orrs	r3, r2
 387:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 1042              		.loc 1 387 36 view .LVU243
 1043 002e C27B     		ldrb	r2, [r0, #15]
 1044              		.loc 1 387 62 view .LVU244
 1045 0030 1204     		lsls	r2, r2, #16
 386:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 1046              		.loc 1 386 84 view .LVU245
 1047 0032 1343     		orrs	r3, r2
 388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 1048              		.loc 1 388 36 view .LVU246
 1049 0034 427A     		ldrb	r2, [r0, #9]
 1050              		.loc 1 388 62 view .LVU247
 1051 0036 1202     		lsls	r2, r2, #8
 387:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 1052              		.loc 1 387 84 view .LVU248
 1053 0038 1343     		orrs	r3, r2
 389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 1054              		.loc 1 389 36 view .LVU249
 1055 003a 027A     		ldrb	r2, [r0, #8]
ARM GAS  /tmp/cc9pIOhy.s 			page 63


 1056              		.loc 1 389 62 view .LVU250
 1057 003c 5200     		lsls	r2, r2, #1
 388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 1058              		.loc 1 388 84 view .LVU251
 1059 003e 1343     		orrs	r3, r2
 390:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 1060              		.loc 1 390 36 view .LVU252
 1061 0040 0278     		ldrb	r2, [r0]
 389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 1062              		.loc 1 389 84 view .LVU253
 1063 0042 1343     		orrs	r3, r2
 382:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 1064              		.loc 1 382 15 view .LVU254
 1065 0044 0B61     		str	r3, [r1, #16]
 1066              	.L59:
 391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 392:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   else
 393:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   {
 394:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     MPU->RBAR = 0x00U;
 395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 396:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 397:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 1067              		.loc 1 397 1 view .LVU255
 1068              		@ sp needed
 1069 0046 7047     		bx	lr
 1070              	.L60:
 394:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 1071              		.loc 1 394 5 is_stmt 1 view .LVU256
 394:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 1072              		.loc 1 394 15 is_stmt 0 view .LVU257
 1073 0048 024B     		ldr	r3, .L62
 1074 004a 0022     		movs	r2, #0
 1075 004c DA60     		str	r2, [r3, #12]
 395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 1076              		.loc 1 395 5 is_stmt 1 view .LVU258
 395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 1077              		.loc 1 395 15 is_stmt 0 view .LVU259
 1078 004e 1A61     		str	r2, [r3, #16]
 1079              		.loc 1 397 1 view .LVU260
 1080 0050 F9E7     		b	.L59
 1081              	.L63:
 1082 0052 C046     		.align	2
 1083              	.L62:
 1084 0054 90ED00E0 		.word	-536810096
 1085              		.cfi_endproc
 1086              	.LFE372:
 1088              		.text
 1089              	.Letext0:
 1090              		.file 4 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g0b1xx.h"
 1091              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1092              		.file 6 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1093              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_cortex.h"
 1094              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h"
ARM GAS  /tmp/cc9pIOhy.s 			page 64


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32g0xx_hal_cortex.c
     /tmp/cc9pIOhy.s:19     .text.__NVIC_SetPriority:0000000000000000 $t
     /tmp/cc9pIOhy.s:24     .text.__NVIC_SetPriority:0000000000000000 __NVIC_SetPriority
     /tmp/cc9pIOhy.s:122    .text.__NVIC_SetPriority:0000000000000058 $d
     /tmp/cc9pIOhy.s:128    .text.__NVIC_GetPriority:0000000000000000 $t
     /tmp/cc9pIOhy.s:133    .text.__NVIC_GetPriority:0000000000000000 __NVIC_GetPriority
     /tmp/cc9pIOhy.s:200    .text.__NVIC_GetPriority:0000000000000044 $d
     /tmp/cc9pIOhy.s:206    .text.__NVIC_SystemReset:0000000000000000 $t
     /tmp/cc9pIOhy.s:211    .text.__NVIC_SystemReset:0000000000000000 __NVIC_SystemReset
     /tmp/cc9pIOhy.s:267    .text.__NVIC_SystemReset:0000000000000014 $d
     /tmp/cc9pIOhy.s:273    .text.SysTick_Config:0000000000000000 $t
     /tmp/cc9pIOhy.s:278    .text.SysTick_Config:0000000000000000 SysTick_Config
     /tmp/cc9pIOhy.s:347    .text.SysTick_Config:0000000000000030 $d
     /tmp/cc9pIOhy.s:353    .text.HAL_NVIC_SetPriority:0000000000000000 $t
     /tmp/cc9pIOhy.s:359    .text.HAL_NVIC_SetPriority:0000000000000000 HAL_NVIC_SetPriority
     /tmp/cc9pIOhy.s:383    .text.HAL_NVIC_EnableIRQ:0000000000000000 $t
     /tmp/cc9pIOhy.s:389    .text.HAL_NVIC_EnableIRQ:0000000000000000 HAL_NVIC_EnableIRQ
     /tmp/cc9pIOhy.s:430    .text.HAL_NVIC_EnableIRQ:0000000000000014 $d
     /tmp/cc9pIOhy.s:435    .text.HAL_NVIC_DisableIRQ:0000000000000000 $t
     /tmp/cc9pIOhy.s:441    .text.HAL_NVIC_DisableIRQ:0000000000000000 HAL_NVIC_DisableIRQ
     /tmp/cc9pIOhy.s:509    .text.HAL_NVIC_DisableIRQ:000000000000001c $d
     /tmp/cc9pIOhy.s:514    .text.HAL_NVIC_SystemReset:0000000000000000 $t
     /tmp/cc9pIOhy.s:520    .text.HAL_NVIC_SystemReset:0000000000000000 HAL_NVIC_SystemReset
     /tmp/cc9pIOhy.s:539    .text.HAL_SYSTICK_Config:0000000000000000 $t
     /tmp/cc9pIOhy.s:545    .text.HAL_SYSTICK_Config:0000000000000000 HAL_SYSTICK_Config
     /tmp/cc9pIOhy.s:569    .text.HAL_NVIC_GetPriority:0000000000000000 $t
     /tmp/cc9pIOhy.s:575    .text.HAL_NVIC_GetPriority:0000000000000000 HAL_NVIC_GetPriority
     /tmp/cc9pIOhy.s:599    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 $t
     /tmp/cc9pIOhy.s:605    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 HAL_NVIC_SetPendingIRQ
     /tmp/cc9pIOhy.s:646    .text.HAL_NVIC_SetPendingIRQ:0000000000000018 $d
     /tmp/cc9pIOhy.s:651    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 $t
     /tmp/cc9pIOhy.s:657    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 HAL_NVIC_GetPendingIRQ
     /tmp/cc9pIOhy.s:714    .text.HAL_NVIC_GetPendingIRQ:000000000000001c $d
     /tmp/cc9pIOhy.s:719    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 $t
     /tmp/cc9pIOhy.s:725    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 HAL_NVIC_ClearPendingIRQ
     /tmp/cc9pIOhy.s:766    .text.HAL_NVIC_ClearPendingIRQ:0000000000000018 $d
     /tmp/cc9pIOhy.s:771    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 $t
     /tmp/cc9pIOhy.s:777    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 HAL_SYSTICK_CLKSourceConfig
     /tmp/cc9pIOhy.s:815    .text.HAL_SYSTICK_CLKSourceConfig:000000000000001c $d
     /tmp/cc9pIOhy.s:820    .text.HAL_SYSTICK_Callback:0000000000000000 $t
     /tmp/cc9pIOhy.s:826    .text.HAL_SYSTICK_Callback:0000000000000000 HAL_SYSTICK_Callback
     /tmp/cc9pIOhy.s:840    .text.HAL_SYSTICK_IRQHandler:0000000000000000 $t
     /tmp/cc9pIOhy.s:846    .text.HAL_SYSTICK_IRQHandler:0000000000000000 HAL_SYSTICK_IRQHandler
     /tmp/cc9pIOhy.s:867    .text.HAL_MPU_Enable:0000000000000000 $t
     /tmp/cc9pIOhy.s:873    .text.HAL_MPU_Enable:0000000000000000 HAL_MPU_Enable
     /tmp/cc9pIOhy.s:923    .text.HAL_MPU_Enable:0000000000000014 $d
     /tmp/cc9pIOhy.s:928    .text.HAL_MPU_Disable:0000000000000000 $t
     /tmp/cc9pIOhy.s:934    .text.HAL_MPU_Disable:0000000000000000 HAL_MPU_Disable
     /tmp/cc9pIOhy.s:966    .text.HAL_MPU_Disable:000000000000000c $d
     /tmp/cc9pIOhy.s:971    .text.HAL_MPU_ConfigRegion:0000000000000000 $t
     /tmp/cc9pIOhy.s:977    .text.HAL_MPU_ConfigRegion:0000000000000000 HAL_MPU_ConfigRegion
     /tmp/cc9pIOhy.s:1084   .text.HAL_MPU_ConfigRegion:0000000000000054 $d

NO UNDEFINED SYMBOLS
